# Dictionaries
primes = {
    0: 2, 1: 3, 2: 5, 3: 7, 4: 11, 5: 13, 6: 17, 7: 19, 8: 23, 9: 29, 10: 31,
    11: 37, 12: 41, 13: 43, 14: 47, 15: 53, 16: 59, 17: 61, 18: 67, 19: 71, 
    20: 73, 21: 79, 22: 83, 23: 89, 24: 97, 25: 101, 26: 103, 27: 107, 28: 109
}

cicada_runes = {
    'ᚠ': {'prime': 0, 'char': 'ᚠ', 'letter': 'F'},
    'ᚢ': {'prime': 1, 'char': 'ᚢ', 'letter': 'V'},
    'ᚦ': {'prime': 2, 'char': 'ᚦ', 'letter': 'TH'},
    'ᚩ': {'prime': 3, 'char': 'ᚩ', 'letter': 'O'},
    'ᚱ': {'prime': 4, 'char': 'ᚱ', 'letter': 'R'},
    'ᚳ': {'prime': 5, 'char': 'ᚳ', 'letter': 'C(K)'},
    'ᚷ': {'prime': 6, 'char': 'ᚷ', 'letter': 'G'},
    'ᚹ': {'prime': 7, 'char': 'ᚹ', 'letter': 'W'},
    'ᚻ': {'prime': 8, 'char': 'ᚻ', 'letter': 'H'},
    'ᚾ': {'prime': 9, 'char': 'ᚾ', 'letter': 'N'},
    'ᛁ': {'prime': 10, 'char': 'ᛁ', 'letter': 'I'},
    'ᛄ': {'prime': 11, 'char': 'ᛄ', 'letter': 'J'},
    'ᛇ': {'prime': 12, 'char': 'ᛇ', 'letter': 'EO'},
    'ᛈ': {'prime': 13, 'char': 'ᛈ', 'letter': 'P'},
    'ᛉ': {'prime': 14, 'char': 'ᛉ', 'letter': 'X'},
    'ᛋ': {'prime': 15, 'char': 'ᛋ', 'letter': 'S(Z)'},
    'ᛏ': {'prime': 16, 'char': 'ᛏ', 'letter': 'T'},
    'ᛒ': {'prime': 17, 'char': 'ᛒ', 'letter': 'B'},
    'ᛖ': {'prime': 18, 'char': 'ᛖ', 'letter': 'E'},
    'ᛗ': {'prime': 19, 'char': 'ᛗ', 'letter': 'M'},
    'ᛚ': {'prime': 20, 'char': 'ᛚ', 'letter': 'L'},
    'ᛝ': {'prime': 21, 'char': 'ᛝ', 'letter': 'NG(ING)'},
    'ᛟ': {'prime': 22, 'char': 'ᛟ', 'letter': 'OE'},
    'ᛞ': {'prime': 23, 'char': 'ᛞ', 'letter': 'D'},
    'ᚪ': {'prime': 24, 'char': 'ᚪ', 'letter': 'A'},
    'ᚫ': {'prime': 25, 'char': 'ᚫ', 'letter': 'AE'},
    'ᚣ': {'prime': 26, 'char': 'ᚣ', 'letter': 'Y'},
    'ᛡ': {'prime': 27, 'char': 'ᛡ', 'letter': 'IA(IO)'},
    'ᛠ': {'prime': 28, 'char': 'ᛠ', 'letter': 'EA'}
}

# Reverse mapping for decoding
rune_to_prime = {value['char']: value['prime'] for value in cicada_runes.values()}
prime_to_rune = {value['prime']: value['char'] for value in cicada_runes.values()}
prime_to_letter = {value['prime']: value['letter'] for value in cicada_runes.values()}

# Function to compute the nth prime's phi value modulo 29
def nth_prime_phi_modulo_29(n):
    if n >= len(primes):
        return 1  # Arbitrary value chosen when n is out of range
    prime_number = primes[n]
    phi_value = prime_number - 1
    return phi_value % 29 if prime_number != 2 else 1

# Decode function
def decode_runes(encoded_text):
    decoded_message = []
    skip_rune = 'ᚠ'
    rune_keys = list(cicada_runes.keys())
    n = 0

    for char in encoded_text:
        if char == skip_rune:
            decoded_message.append(skip_rune)
            continue

        if char in rune_to_prime:
            prime_index = rune_to_prime[char]
            shift = nth_prime_phi_modulo_29(n)
            shifted_index = (prime_index - shift) % 29
            decoded_char = prime_to_letter[shifted_index]
            decoded_message.append(decoded_char)
            n += 1
        else:
            decoded_message.append(char)

    return ''.join(decoded_message)

# Encoded message
encoded_message = "ᚫᛄ-ᛟᛋᚱ.ᛗᚣᛚᚩᚻ-ᚩᚫ-ᚳᚦᚷᚹ-ᚹᛚᚫ.ᛉ/ᚩᚪᛈ-ᛗᛞᛞᚢᚷᚹ-ᛚ-ᛞᚾᚣᛄ-ᚳᚠᛡ-ᚫᛏ/ᛈᛇᚪᚦ-ᚳᚫ./&36367763ab73783c7af284446c/59466b4cd653239a311cb7116/d4618dee09a8425893dc7500b/464fdaf1672d7bef5e891c6e227/4568926a49fb4f45132c2a8b4/&ᚳᛞ-ᚠᚾ-ᛡᛖ-ᚠᚾᚳᛝ-ᚱᚠ-ᚫᛁᚱᛞᛖ-ᛋᚣᛄᛠᚢ/ᛝᚹ-ᛉᚩ-ᛗᛠᚹᚠ-ᚱᚷᛡ-ᛝᚱᛒ-ᚫᚾᚢᛋ./"

# Decode the message
decoded_message = decode_runes(encoded_message)
print("Decoded Message:", decoded_message)
